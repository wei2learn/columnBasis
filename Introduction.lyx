#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass sig-alternate
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package none
\inputencoding latin9
\fontencoding T1
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 2
\use_esint 1
\use_mhchem 0
\use_mathdots 0
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 2
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Matrix-GCD"

\end_inset

Introduction
\end_layout

\begin_layout Standard
In this paper, we consider the problem of efficiently computing a column
 basis of a polynomial matrix 
\begin_inset Formula $\mathbf{F}\in\mathbb{K}\left[x\right]^{m\times n}$
\end_inset

 with 
\begin_inset Formula $n\ge m$
\end_inset


\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
 and column degrees bounded by the corresponding entries of a list of integers
 
\begin_inset Formula $\vec{s}\in\mathbb{Z}^{n}$
\end_inset


\end_layout

\end_inset

.
 A column basis of 
\begin_inset Formula $\mathbf{F}$
\end_inset

 is a basis for the 
\begin_inset Formula $\mathbb{K}\left[x\right]$
\end_inset

-module 
\begin_inset Formula 
\[
\left\{ \mathbf{F}\mathbf{p}~|~\mathbf{p}\in\mathbb{K}\left[x\right]^{n}~\right\} ~.
\]

\end_inset

Such a basis can be represented as a full rank matrix 
\begin_inset Formula $\mathbf{T}\in\mathbb{K}\left[x\right]^{m\times r}$
\end_inset

 whose columns are the basis elements and generate the same 
\begin_inset Formula $\mathbb{K}\left[x\right]$
\end_inset

-module as generated by the columns of 
\begin_inset Formula $\mathbf{F}$
\end_inset

.
 A column basis is not unique and indeed any column basis right multiplied
 by a unimodular matrix gives another column basis.
 As a result, a column basis can have arbitrary high degree.
 In this paper, the column basis we compute has column degrees bounded by
 the largest column degrees of the input matrix.
\end_layout

\begin_layout Standard
Column bases are fundamental operations in polynomial matrix algebra.
 As an example, when the row dimension 
\begin_inset Formula $m=1$
\end_inset

, finding a column basis coincides with finding a greatest common divisor
 (GCD) of all the polynomials in the matrix.
 Similarly, the nonzero columns of column reduced forms, Popov normal forms,
 and Hermite normal forms are all column bases satisfying additional degree
 constraints.
 A column reduced form gives a special column basis whose column degrees
 are the smallest possible, while Popov and Hermite forms are special column
 reduced or shifted column reduced forms satisfying additional conditions
 that make them unique.
 Efficient column basis computation is thus useful for fast computation
 for such core procedures as determining matrix GCDs 
\begin_inset CommandInset citation
LatexCommand cite
key "BL2000"

\end_inset

, column reduced forms 
\begin_inset CommandInset citation
LatexCommand cite
key "BVP:1988"

\end_inset

 and Popov forms 
\begin_inset CommandInset citation
LatexCommand cite
key "villard96"

\end_inset

 of 
\begin_inset Formula $\mathbf{F}$
\end_inset

 with any dimension and rank.
 Column basis computation in this paper also provides a deterministic alternativ
e to randomized lattice compression 
\begin_inset CommandInset citation
LatexCommand cite
key "li:2006,storjohann-villard:2005"

\end_inset

.
\end_layout

\begin_layout Standard
While column bases are produced by column reduced form, Popov form, and
 Hermite form, and much work has been done on computing these forms 
\begin_inset CommandInset citation
LatexCommand cite
key "bcl:2006,beelen:1988,Giorgi2003,GSSV2012,sarkar2011,SS2011"

\end_inset

, most of the existing algorithms require square nonsingular input matrices,
 which are already column bases to start with.
 It is however pointed out in 
\begin_inset CommandInset citation
LatexCommand cite
key "sarkar2011,SS2011"

\end_inset

 that randomization can be used to relax the square nonsingular requirement.
\end_layout

\begin_layout Standard
To compute a column basis, we know from 
\begin_inset CommandInset citation
LatexCommand cite
key "BL1997"

\end_inset

 that any matrix polynomial 
\begin_inset Formula $\mathbf{F}\in\mathbb{K}\left[x\right]^{m\times n}$
\end_inset

 can be unimodularly transformed to a column basis by repeatedly working
 with the leading column coefficient matrices.
 However this method of computing a column basis can be expensive.
 Indeed one needs to work with up to 
\begin_inset Formula $\sum\vec{s}$
\end_inset

 such coefficient matrices, which could involve up to 
\begin_inset Formula $\sum\vec{s}$
\end_inset

 polynomial matrix multiplications.
\end_layout

\begin_layout Standard
In this paper we give a fast, deterministic algorithm for the computation
 of a column basis for 
\begin_inset Formula $\mathbf{F}$
\end_inset

 having complexity 
\begin_inset Formula $O^{\sim}\left(n^{\omega}s\right)$
\end_inset

 field operations in 
\begin_inset Formula $\mathbb{K}$
\end_inset

 with 
\begin_inset Formula $s$
\end_inset

 being the average average column degree of 
\begin_inset Formula $\mathbf{F}$
\end_inset

.
 Here the soft-
\begin_inset Formula $O$
\end_inset

 notation is Big-
\begin_inset Formula $O$
\end_inset

 with log factors removed while 
\begin_inset Formula $\omega$
\end_inset

 is the exponent of matrix multiplication.
 Our algorithm works for both rectangular and non-full column rank matrices
 with the method depending on kernel computation of 
\begin_inset Formula $\mathbf{F}$
\end_inset

 along with finding a factorization of the input matrix polynomial into
 a column basis and a left kernel of the right kernel.
 Finding the right and left kernel then makes use of the fast kernel and
 order basis algorithms from 
\begin_inset CommandInset citation
LatexCommand cite
key "za2012"

\end_inset

 and 
\begin_inset CommandInset citation
LatexCommand cite
key "za2009"

\end_inset

, respectively.
\end_layout

\begin_layout Standard
The remainder of this paper is as follows.
 Basic definitions and preliminary results on both kernel and order bases
 are given in the next section.
 Section 3 provides the matrix factorization form of our input polynomial
 matrix that forms the core of our procedure, with a column basis being
 the left factor, and the right factor is a left kernel basis of a right
 kernel basis of the input matrix.
 Section 4 provides an algorithm for fast computation of a left kernel making
 use of order bases computation with unbalanced shift.
 The column basis algorithm is given in Section 5 with the following section
 giving details on how the methods can be improved when the number of columns
 is significantly larger than the number of rows.
 
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Section 7 shows how our results give fast algorithms for column reduced
 and Popov forms for arbitrary matrix polynomials.
\end_layout

\end_inset

 The paper ends with a conclusion along with topics for future research.
\end_layout

\end_body
\end_document
